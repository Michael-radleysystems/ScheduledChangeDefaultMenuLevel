
local bDebugPrinting = true;

local g_nTimerID;
local g_tDateLastDone = {day = 0};
local nBreakfastPage = 2;
local nLunchPage = 3;
local nDinnerPage = 4;
local bBreakfastDone = false;
local bLunchDone = false;
local bDinnerDone = false;
local cBreakfastTime;
local cLunchTime;
local cDinnerTime;
local cDayEnd;
local tDefaultMenuLevel ={DEFAULTMENULEVEL = 10};

function OnInit()
{	
	//debug console 
    if(bDebugPrinting)
    {
        // only set these if debug printing is on, we don't want to set console to false as there's only one and it'll stop any script loaded earlier from using it.
        ICR_SetFeature("CONSOLE",bDebugPrinting);
        ICR_SetFeature("AUTORESTART",bDebugPrinting);
    }
	
	// timer once per minute
	g_nTimerID = ICR_StartTimer(60000);
	
	cBreakfastTime = Time({hour = 06, min = 00, sec = 00});
	cLunchTime = Time({hour = 11, min = 00, sec = 00});
	cDinnerTime = Time({hour = 19, min = 45, sec = 00});
	cDayEnd = Time({hour = 03, min = 00, sec = 00});
	
	nBreakfastPage = nBreakfastPage + 10;
	nLunchPage = nLunchPage + 10;
	nDinnerPage = nDinnerPage + 10;
	
	//testBed();
}

function testBed()
{
	print("Printing Time class without explicit call of tostring: "+cBreakfastTime);
	print("cBreakfastTime is instance of Time()"+ (cBreakfastTime instanceof Time));
	local teaTime = {hours = 0, min = 0, sec = 0}
	//cBreakfastTime.compareTo(teaTime);
	print(cBreakfastTime.compareTo(cDinnerTime));
	print("Hour before: "+cDayEnd);
	local tTempflags = ICR_GetPGMData(101, 1);
	print("Default page number: "+tTempflags.DEFAULTMENULEVEL);
	
}


function OnTimer(nTimerID,nSysTimer)
{	
	// is it our timer?
	if(nTimerID == g_nTimerID)
	{		
		if(bDebugPrinting) print("Breakfast compared to now: "+cBreakfastTime.compareTo(Time(date())));		
		
		//TODO check the time set lunch page
		if(bDebugPrinting) print("Before Breakfast if Breakfast done: "+bBreakfastDone+" , Lunch done:"+bLunchDone+" , Dinner done:"+bDinnerDone);
		if(!bBreakfastDone && (cLunchTime.compareTo(Time(date())) <= 0))
		{
			if(bDebugPrinting) print("In side breakfast done time: "+Time(date()));
			bBreakfastDone = true;
			bLunchDone = false;
			setDefaultMeunLevel(tDefaultMenuLevel, nBreakfastPage);
		}
		
		if(bDebugPrinting) print(" After Breakfast if Breakfast done: "+bBreakfastDone+" , Lunch done:"+bLunchDone+" , Dinner done:"+bDinnerDone);
		
		//TODO check the time set dinner page
		if(!bLunchDone && (cDinnerTime.compareTo(Time(date())) <= 0))
		{
			if(bDebugPrinting) print("In side lunch done time: "+Time(date()));
			bLunchDone = true;
			bDinnerDone = false;
			setDefaultMeunLevel(tDefaultMenuLevel, nLunchPage);
		}
		
		if(bDebugPrinting) print(" After Lunch if Breakfast done: "+bBreakfastDone+" , Lunch done:"+bLunchDone+" , Dinner done:"+bDinnerDone);
		
		//TODO check the time
		//reset lunch and dinner check
		//set breakfast page
		//set day check
		if(!bDinnerDone && (cBreakfastTime.compareTo(Time(date())) <= 0) && (cDayEnd.compareTo(Time(date())) >=0) )
		{
			if(bDebugPrinting) print("In side dinner done time: "+Time(date()));
			bDinnerDone = true;
			bBreakfastDone = false;
			setDefaultMeunLevel(tDefaultMenuLevel, nDinnerPage);
		}
		
		if(bDebugPrinting) print(" After Dinner if Breakfast done: "+bBreakfastDone+" , Lunch done:"+bLunchDone+" , Dinner done:"+bDinnerDone);		
		
		/*
		//Example for time checking
		local tDate = date();
		if (g_tDateLastDone.day == tDate.day)
		{
			// already done it today
			return;
		}
		*/
	}
}

// Function foe saving the new page to the system file
function setDefaultMeunLevel(tSystemFlags, nPageNumber)
{
	//Push the page number into our temp table
	tSystemFlags.DEFAULTMENULEVEL <- nPageNumber;
	//save the setting to the system file.
	ICR_SetPGMData(101,1,tSystemFlags);
	if(bDebugPrinting) print("Default page number swapped to: "+nPageNumber);
}

/*
 * Create a Time class for doing time comparison 
 * 
 */

class Time
{
	hour = 0;
	min = 0;
	sec = 0;
	
	constructor(tDate)
	{
		hour = tDate.hour;
		min = tDate.min;
		sec = tDate.sec;
	}

	function compareTo(tTime)
	{
		if(tTime instanceof Time)
		{
			if(bDebugPrinting) print("Inside Time() this object: "+hour+":"+min+"."+sec+" compareTo passed in Time object: "+tTime);
			if(hour < tTime.hour)
			{
				if(bDebugPrinting) print("Inside hour < ");
				return -1; // return negative is this object is smaller			
			}
			
			if(hour > tTime.hour)
			{
				if(bDebugPrinting) print("Inside hour > ");
				return 1; // return positive is this object is bigger
			}
			
			if(hour == tTime.hour)
			{
				if(min < tTime.min)
				{
					if(bDebugPrinting) print("Inside min < ");
					return -1; // return negative is this object is smaller
				}
				
				if(min > tTime.min)
				{
					if(bDebugPrinting) print("Inside min > ");
					return 1; // return positive is this object is bigger
				}
				
				if(min == tTime.min)
				{
					if(sec < tTime.sec)
					{
						if(bDebugPrinting) print("Inside sec < ");
						return -1; // return negative is this object is smaller
					}
					
					if(sec > tTime.sec)
					{
						if(bDebugPrinting) print("Inside sec > ");
						return 1; // return positive is this object is bigger
					}
					
					if(sec == tTime.sec)
					{
						if(bDebugPrinting) print("Inside sec = ");
						return 0; // return zero is this object is the same as the passed in object
					}
				}
			}
		}
		else
		{
			throw (tTime+" is not of type Time");
		}
	}
	
	function addHour(nHour)
	{
		local nTempHour = hour + nHour;
		
		if(nTempHour > 23)
		{
			hour = 00;
		}
		else
		{
			hour = nTempHour;
		}
	}
	
	function minusHour(nHour)
	{
		local nTempHour = hour - nHour;
		
		if(nTempHour < 0)
		{
			hour = 00;
		}
		else
		{
			hour = nTempHour;
		}
	}
	
	function _tostring()
	{
		return hour+":"+min+"."+sec; // return contents as String
	}
}

